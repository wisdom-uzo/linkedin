import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { getProviders, getSession, signOut, useSession } from "next-auth/react";
import Header from '../components/Header';
import Sidebar from '../components/Sidebar';
import { useRouter } from 'next/router';
import Feed from '../components/Feed';
import { AnimatePresence } from 'framer-motion';
import Modal from '../components/Modal';
import { useRecoilState } from 'recoil';
import { modalState, modalTypeState } from '../atoms/modelAtom';
import { connectToDatabase } from '../Utils/mongodb';
import Widgets from '../components/Widgets';


export default function Home({posts, news}) {

  
  const [modalOpen, setModalOpen] = useRecoilState(modalState);
  const [modalType, setModalType] = useRecoilState(modalTypeState);
  const router = useRouter()

  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      // The user is not authenticated, handle it here.
      router.push('/home')
    }
  })

    
  return (
    <div className='dark:bg-black bg-[#F3F2EF] h-screen 
     dark:text-white overflow-y-scroll md:space-y-6'>
      <Head> 
        <title>linkedin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="flex justify-center gap-x-4 sm:px-12">
        <div className="flex flex-col md:flex-row gap-x-5">
            <Sidebar />
            <Feed posts={posts}/>
        </div>
        <Widgets news={news} />

        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={() => setModalOpen(false)} type={modalType} />
          )}
        </AnimatePresence>

      </main>
    </div>
  )
}

export async function getServerSideProps(context) {

  // Check if the user is authenticated
    const session = await getSession(context)
    if(!session){
      return {
        redirect: {
          permanent:false,
          destination:'/home',
        }
      } 
    }

    // get post from SSR

    const {db} = await connectToDatabase();
    const posts = await db
      .collection("posts")
      .find()
      .sort({timestamp: -1})
      .toArray()

    // Get Google News
    // const results = await fetch(`https://newsapi.org/v2/top-headlines?country=us&apiKey=${process.env.NEWSAPI_KEY}`)
    //   .then(res => res.json())

    const results = await fetch(`https://newsapi.org/v2/everything?q=tesla&from=2022-02-15&sortBy=publishedAt&apiKey=${process.env.NEWSAPI_KEY}`)
    .then(res => res.json())

    return {
      props: {
        news: results.articles,
        session,
        posts: posts.map((post) => ({
          _id: post._id.toString(),
          input: post.input,
          photoUrl: post.photoUrl,
          username: post.username,
          email: post.email,
          userImg: post.userImg,
          createdAt: post.createdAt,
        })),
      }
    }
}